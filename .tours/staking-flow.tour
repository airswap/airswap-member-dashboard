{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Staking flow",
  "steps": [
    {
      "file": "src/features/staking/StakingModal.tsx",
      "description": "Values imported from Zustand store:\n- formReturn manages state of NumberInput, where the user enters the amount to approve/stake/unstake\n- txType is either \"stake\" or \"unstake\"",
      "line": 19
    },
    {
      "file": "src/features/staking/StakingModal.tsx",
      "description": "Checks if user needs to approve token spending. If `needsApproval` is `true`, clicking the stake button will fire off `approveAst` function. If `needsApproval` is `false`, the connected user has approved the contract to spend AST and can stake tokens",
      "line": 32
    },
    {
      "file": "src/features/staking/StakingModal.tsx",
      "description": "useApproveAst, useStakeAst, and useUnstakeSast are all similar function.\n- approveAst: this is a 'write' function that approves the contract to spend AST\n- dataApproveAst: the 'data' functions in these hooks are mostly used to get a transaction hash after the 'write' function runs.\n- restApproveAst: the 'reset' functions can get called to reset the data after a 'write' function gets called. Resetting data allows for the TransactionTracker.tsx component to render the correct data based on where a user is in the staking flow",
      "line": 44
    },
    {
      "file": "src/features/staking/StakingModal.tsx",
      "description": "- `txStatus` returns the current state of a transaction: \"idle\", \"loading\", \"success\", or \"error\". These values get passed into AmountStakedText.tsx, which then gets passed into TransactionTracker.tsx. These values help show the user where they are in the staking flow.\n- `useWaitForTransaction` hook gets called in StakingModal.tsx instead of TransactionTracker.tsx, because we want to keep TransactionTracker as generic as possible, to allow for non-staking transactions to also be passed in",
      "line": 62
    },
    {
      "file": "src/features/staking/StakingModal.tsx",
      "description": "`modalButtonActionsAndText` returns functions based on where a user is in the staking flow. These are 'write' functions from Wagmi hooks that get called when a user clicks the \"STAKE\" button in StakingModal.tsx. These button actions are different than the `actionButtons` variable below; `actionButtons` returns 'reset' functions from Wagmi, which help the TransactionTracker.tsx component get \"unstuck\" when a user moves along the staking flow.",
      "line": 67
    },
    {
      "file": "src/features/staking/StakingModal.tsx",
      "description": "AmountStakedText has its own component because it contains flex box formatting, and does not need to be rendered unless a transaction is successful",
      "line": 87
    },
    {
      "file": "src/features/staking/StakingModal.tsx",
      "description": "Variable gets passed as a prop to TransactionTracker. Gives user a description of what's currently happening if a transaction is processing",
      "line": 89
    },
    {
      "file": "src/features/staking/StakingModal.tsx",
      "description": "function returns 'reset' functions from Wagmi",
      "line": 96
    },
    {
      "file": "src/features/staking/StakingModal.tsx",
      "description": "Logic processes `actionButtons` and passes the correct functions as a prop to TransactionTracker. These functions get called after a transaction finishes processing, and allows a user to move along to the next step in the staking flow.",
      "line": 102
    },
    {
      "file": "src/features/staking/StakingModal.tsx",
      "description": "ManageStake.tsx renders \"stake\" and \"unstake\" buttons, and NumberInput.",
      "line": 129
    }
  ]
}