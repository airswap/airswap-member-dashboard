{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Staking flow",
  "steps": [
    {
      "file": "src/features/staking/StakingModal.tsx",
      "description": "Values imported from Zustand store:\n- txType is either \"stake\" or \"unstake\" \n- setIsTxLoading and setTxStatus store if a transaction is loading. The corresponding isTxLoading and txStatus variables in Zustand are used in Modal.tsx to disable the close modal button",
      "line": 20
    },
    {
      "file": "src/features/staking/StakingModal.tsx",
      "description": "This state tracks whether the last transaction was an approval. Changes future variables such as `verb`, which manipulates TransactionTracker.tsx to render relevant data",
      "line": 27
    },
    {
      "file": "src/features/staking/StakingModal.tsx",
      "description": "Checks if user needs to approve token spending. If `needsApproval` is `true`, clicking the stake button will fire off `approveAst` function. If `needsApproval` is `false`, the connected user has approved the contract to spend AST and can stake tokens",
      "line": 39
    },
    {
      "file": "src/features/staking/StakingModal.tsx",
      "description": "useApproveAst, useStakeAst, and useUnstakeSast are all similar function.\n- approveAst: this is a 'write' function that approves the contract to spend AST\n- dataApproveAst: the 'data' functions in these hooks are mostly used to get a transaction hash after the 'write' function runs.\n- restApproveAst: the 'reset' functions can get called to reset the data after a 'write' function gets called. Resetting data allows for the TransactionTracker.tsx component to render the correct data based on where a user is in the staking flow",
      "line": 62
    },
    {
      "file": "src/features/staking/StakingModal.tsx",
      "description": "- `txStatus` returns the current state of a transaction: \"idle\", \"loading\", \"success\", or \"error\". Gets passed into `modalTxLoadingStateHeadlines` to generate relevant headlines. Also gets passed along to Zustand store, but only to control the close button in Modal.tsx",
      "line": 96
    },
    {
      "file": "src/features/staking/StakingModal.tsx",
      "description": "`modalButtonActionsAndText` returns functions based on where a user is in the staking flow. These are 'write' functions from Wagmi hooks that get called when a user clicks the \"STAKE\" button in StakingModal.tsx. These button actions are different than the `actionButtons` variable below; `actionButtons` returns 'reset' functions from Wagmi, which help the TransactionTracker.tsx component get \"unstuck\" when a user moves along the staking flow.",
      "line": 101
    },
    {
      "file": "src/features/staking/StakingModal.tsx",
      "description": "`actionButtonsObject` function returns 'reset' functions from Wagmi. These reset functions get passed into `actionButtonLogic`, which then gets passed into TransactionTracker.tsx",
      "line": 116
    },
    {
      "file": "src/features/staking/StakingModal.tsx",
      "description": "`modalTxLoadingStateHeadlines` updates the headline in Modal.tsx to reflect where the user is in the staking flow process",
      "line": 122
    },
    {
      "file": "src/features/staking/StakingModal.tsx",
      "description": "`shouldShowTracker` is used to conditionally render TransactionTracker.tsx. We only want TransactionTracker to show when a user has made a transaction",
      "line": 136
    },
    {
      "file": "src/features/staking/StakingModal.tsx",
      "description": "`verb` gets passed into TransactionTracker.tsx and indicates a user action after a successful transaction",
      "line": 143
    },
    {
      "file": "src/features/staking/StakingModal.tsx",
      "description": "If a transaction is in loading state or if user needs to approve transaction in MetaMask, this variable gets passed into Modal.tsx and disables the close button",
      "line": 150
    },
    {
      "file": "src/features/staking/StakingModal.tsx",
      "description": "ManageStake.tsx renders \"stake\" and \"unstake\" buttons, and NumberInput.",
      "line": 186
    }
  ]
}
